
highlight BadIndent ctermbg=1
autocmd Syntax {bash,css,html,java,javascript,python,php,sh,vim} call matchadd('BadIndent', '^\t*\zs \+')

map <F5> :!%:p<CR>   """ run script

""" scrollsync
map <F10> :set scb!<bar>set scb?<cr>

""" [plugin] vim-ack
let g:ackprg="ack-grep -H --nocolor --nogroup --column"
nmap <leader>g :Ack 

""" [plugin] excel.vim
let g:zipPlugin_ext = '*.zip,*.jar,*.xpi,*.ja,*.war,*.ear,*.celzip,*.oxt,*.kmz,*.wsz,*.xap,*.docx,*.docm,*.dotx,*.dotm,*.potx,*.potm,*.ppsx,*.ppsm,*.pptx,*.pptm,*.ppam,*.sldx,*.thmx,*.crtx,*.vdw,*.glox,*.gcsx,*.gqsx'

""" [plugin] gundo
nmap <F6> :GundoToggle<CR>

nnoremap <Leader>u :GundoToggle<CR>
let g:gundo_width = 65
"let g:gundo_preview_height = 20
"let g:gundo_right = 1
"let g:gundo_preview_statusline =
"let g:gundo_tree_statusline =

""" [plugin] syntastic
" also have a look at the 'Language Support' section for language specific options 

"nnoremap <silent> <C-d> :lclose<CR>:bdelete<CR>     " location list close
"cabbrev <silent> bd lclose\|bdelete

" ruler
" set ruler


" Add the virtualenv's site-packages to vim path
py << EOF
import os.path
import sys
import vim
if 'VIRTUAL_ENV' in os.environ:
    project_base_dir = os.environ['VIRTUAL_ENV']
    sys.path.insert(0, project_base_dir)
    activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
    execfile(activate_this, dict(__file__=activate_this))
EOF

""" sh
"let g:is_bash = 1
"let g:sh_fold_enabled=3     " (enable function folding)folding

" backwards highliting
"let sh_minlines = 50 
"let sh_maxlines = 100       " default 2x sh_minlines
"let ptcap_minlines = 50
"let rexx_minlines = 50

"
""--SuperTab Integration
"set completeopt-=previewtj
"let g:SuperTabDefaultCompletionType = ""
"let g:SuperTabDefaultCompletionType = "context"

""" [plugin] Supertab
let g:SuperTabDefaultCompletionType = "context"
"let g:SuperTabContextDefaultCompletionType = "<C-X><C-O>"
"let g:SuperTabContextDefaultCompletionType = "<c-p>"

" omni
"let g:SuperTabDefaultCompletionType = "\<c-x>\<c-o>"

" user
"let g:SuperTabDefaultCompletionType = "<c-x><c-u>"

"let g:SuperTabCompletionContexts = ['s:ContextText', 's:ContextDiscover']
"let g:SuperTabContextTextOmniPrecedence = ['&omnifunc', '&completefunc']
"let g:SuperTabContextDiscoverDiscovery = ["&completefunc:<c-x><c-u>", "&omnifunc:<c-x><c-o>"]
"let g:SuperTabCrMapping = 1

"let g:SuperTabCrClosePreview = 1
"let g:SuperTabClosePreviewOnPopupClose = 1

"let g:SuperTabMappingForward = '<s-tab>'
"let g:SuperTabMappingBackward = '<s-c-tab>'
"let g:SuperTabMappingTabLiteral = '<tab>'

"autocmd FileType *
  "\ if &omnifunc != '' |
  "\   call SuperTabChain(&omnifunc, "<c-p>") |
  "\   call SuperTabSetDefaultCompletionType("<c-x><c-u>") |
  "\ endif

"set completeopt=longest,menuone

"command Shell :set nolist | ConqueTermSplit bash
"command PythonShell :set nolist | ConqueTermSplit python

"let javaScript_fold=1         " JavaScript
"let perl_fold=1               " Perl
"let php_folding=1             " PHP
"let r_syntax_folding=1        " R
"let ruby_fold=1               " Ruby
"let sh_fold_enabled=1         " sh
"let vimsyn_folding='af'       " Vim script
"let xml_syntax_folding=1      " XML

"set foldmethod=indent
"set foldnestmax=2

"set foldmethod=syntax
"set foldlevelstart=1

" let g:is_bash = 1
" let g:sh_fold_enabled = 1

"map <silent><C-Left> <C-T>              " taglist - map Ctrl-LeftArrow to jump to the method/property under your cursor
"map <silent><C-Right> <C-]>             " taglist - map Ctrl-RhitArrow to jump back to your source code
"map <silent><A-Right> :tabnext<CR>      " map Alt-RightArrow to jump to the next tab
"map <silent><A-Left> :tabprevious<CR>   " map Alt-LeftArrow to jump to the previous tab

" fugitive as merge tool
"git config --global mergetool.fugitive.cmd 'vim -f -c "Gdiff" "$MERGED"'
"git config --global merge.tool fugitive
"
