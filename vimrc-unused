
" set list           " show unprintable chars

" buffer stuff
set browsedir=buffer    " open path should be on pwd of file in buffer

" Suffixes that get lower priority when doing tab completion for filenames.
" These are files we are not likely to want to edit or read.
set suffixes=.bak,~,.swp,.o,.so,.out,.bin,.aux,.idx,.jpg,.png,.gif,.avi,.mkv,.mp3,.flac

" wildmenu
set wildmenu
"set wildmode=longest,list,full
set wildmode=longest:full,full
set wildignore=.svn,CVS,.git,.hg,*.o,*.a,*.mo,*.la,*.so,*.obj,*.swp,*.xpm,*.exe,*.rar

"" automatically give executable permissions if file begins with #! and contains '/bin/' in the path
"au BufWritePost * if getline(1) =~ "^#!" | if getline(1) =~ "/bin/" | silent !chmod a+x <afile> | endif | endif

map <F5> :!%:p<CR>   """ run script

""" [plugin] gundo
nmap <F6> :GundoToggle<CR>

""" scrollsync
map <F10> :set scb!<bar>set scb?<cr>

""" [plugin] vim-ack
let g:ackprg="ack-grep -H --nocolor --nogroup --column"
nmap <leader>g :Ack 

""" [plugin] excel.vim
let g:zipPlugin_ext = '*.zip,*.jar,*.xpi,*.ja,*.war,*.ear,*.celzip,*.oxt,*.kmz,*.wsz,*.xap,*.docx,*.docm,*.dotx,*.dotm,*.potx,*.potm,*.ppsx,*.ppsm,*.pptx,*.pptm,*.ppam,*.sldx,*.thmx,*.crtx,*.vdw,*.glox,*.gcsx,*.gqsx'

""" [plugin] Gundo
nnoremap <Leader>u :GundoToggle<CR>
let g:gundo_width = 65
"let g:gundo_preview_height = 20
"let g:gundo_right = 1
"let g:gundo_preview_statusline =
"let g:gundo_tree_statusline =

""" [plugin] syntastic
" also have a look at the 'Language Support' section for language specific options 
let g:syntastic_check_on_open=1
let g:syntastic_check_on_wq=0
let g:syntastic_auto_loc_list=2
let g:syntastic_always_populate_loc_list=1
let g:syntastic_disabled_filetypes=['html']
let g:syntastic_enable_signs=1

"if has("unix")
  "let g:syntastic_error_symbol = "█"
  "let g:syntastic_style_error_symbol = ">"
  "let g:syntastic_warning_symbol = "█"
  "let g:syntastic_style_warning_symbol = ">"
"else
  "let g:syntastic_error_symbol = "X"
  "let g:syntastic_style_error_symbol = ">"
  "let g:syntastic_warning_symbol = "!"
  "let g:syntastic_style_warning_symbol = ">"
"endif

"nnoremap <silent> <C-d> :lclose<CR>:bdelete<CR>     " location list close
"cabbrev <silent> bd lclose\|bdelete

filetype on
filetype plugin on
filetype plugin indent on
filetype indent on

" ruler
" set ruler

" {{{ php
autocmd FileType php set omnifunc=phpcomplete#CompletePHP
autocmd FileType php set ft=php.javascript.html
autocmd FileType php let php_sql_query=1
autocmd FileType php let php_htmlInStrings=1

" Map <CTRL>-P to run PHP parser check
autocmd FileType php noremap <C-P> :!php -l %<CR>

" The php completion dictionary is provided by Rasmus: http://lerdorf.com/funclist.txt
"autocmd FileType php set dictionary-=/home/simon/.vim/documentation/php_funclist.txt dictionary+=/home/simon/.vim/documentation/php_funclist.txt

" php manual
function! OpenPhpFunction (keyword)
    let proc_keyword = substitute(a:keyword , '_', '-', 'g')
    exe 'split'
    exe 'enew'
    exe "set buftype=nofile"
    exe 'silent r!lynx -dump -nolist http://www.php.net/manual/en/print/function.'.proc_keyword.'.php'
    exe 'norm gg'
    exe 'call search ("' . a:keyword .'")'
    exe 'norm dgg'
    exe 'call search("User Contributed Notes")'
    exe 'norm dGgg'
endfunction
autocmd FileType php noremap <C-k> :call OpenPhpFunction('<C-r><C-w>')<CR>
" }}}

" {{{ html, js. python, C, make, sql 
""" html/xml/css
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags
autocmd FileType html set ft=html.javascript

""" JavaScript
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd FileType javascript set ft=javascript.html

""" Python
autocmd FileType python set omnifunc=pythoncomplete#Complete
let g:syntastic_python_checkers=['flake8']
let g:syntastic_python_flake8_args='--ignore=E501'

" Add the virtualenv's site-packages to vim path
py << EOF
import os.path
import sys
import vim
if 'VIRTUAL_ENV' in os.environ:
    project_base_dir = os.environ['VIRTUAL_ENV']
    sys.path.insert(0, project_base_dir)
    activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
    execfile(activate_this, dict(__file__=activate_this))
EOF

""" C
autocmd FileType c set omnifunc=ccomplete#Complete

""" make
autocmd FileType make set noexpandtab shiftwidth=8

""" sql
let g:sql_type_default = 'pgsql'

""" sh
"let g:is_bash = 1
"let g:sh_fold_enabled=3     " (enable function folding)folding

""" binary
"augroup Binary au! au BufReadPre *.bin let &bin=1 au BufReadPost *.bin if &bin | %!xxd au BufReadPost  *.bin set filetype=xxd | endif au BufWritePre *.bin if &bin | %!xxd -r au BufWritePre *.bin endif au BufWritePost *.bin if &bin | %!xxd au BufWritePost *.bin set nomod | endif

" }}}

" backwards highliting
"let sh_minlines = 50 
"let sh_maxlines = 100       " default 2x sh_minlines
"let ptcap_minlines = 50
"let rexx_minlines = 50

""" [plugin] Supertab
let g:SuperTabDefaultCompletionType = "context"
"let g:SuperTabContextDefaultCompletionType = "<C-X><C-O>"
"let g:SuperTabContextDefaultCompletionType = "<c-p>"

" omni
"let g:SuperTabDefaultCompletionType = "\<c-x>\<c-o>"

" user
"let g:SuperTabDefaultCompletionType = "<c-x><c-u>"

"let g:SuperTabCompletionContexts = ['s:ContextText', 's:ContextDiscover']
"let g:SuperTabContextTextOmniPrecedence = ['&omnifunc', '&completefunc']
"let g:SuperTabContextDiscoverDiscovery = ["&completefunc:<c-x><c-u>", "&omnifunc:<c-x><c-o>"]
"let g:SuperTabCrMapping = 1

"let g:SuperTabCrClosePreview = 1
"let g:SuperTabClosePreviewOnPopupClose = 1

"let g:SuperTabMappingForward = '<s-tab>'
"let g:SuperTabMappingBackward = '<s-c-tab>'
"let g:SuperTabMappingTabLiteral = '<tab>'

"autocmd FileType *
  "\ if &omnifunc != '' |
  "\   call SuperTabChain(&omnifunc, "<c-p>") |
  "\   call SuperTabSetDefaultCompletionType("<c-x><c-u>") |
  "\ endif

"set completeopt=longest,menuone

""" random stuff
"
" set fillchars=vert:┃,diff:⎼,fold:⎼  " it's about borders?!

" set printoptions=paper:a4
"set printoptions=number:y " put line numbers on hardcopy

" if $POWERLINE_FONT == "true" 
" endif

" set binary " show control characters (ignore 'fileformat')

" " swap aus
"
" set noautoindent " do not auto indent
"
"

"command Shell :set nolist | ConqueTermSplit bash
"command PythonShell :set nolist | ConqueTermSplit python

"set foldmethod=syntax
"set foldlevelstart=1

"let javaScript_fold=1         " JavaScript
"let perl_fold=1               " Perl
"let php_folding=1             " PHP
"let r_syntax_folding=1        " R
"let ruby_fold=1               " Ruby
"let sh_fold_enabled=1         " sh
"let vimsyn_folding='af'       " Vim script
"let xml_syntax_folding=1      " XML

" set foldmethod=indent
" set foldnestmax=2

" let g:is_bash = 1
" let g:sh_fold_enabled = 1

" -- tags
"set tags=tags;$HOME/.vim/tags/ "recursively searches directory for 'tags' file

" TagList Plugin Configuration
"let Tlist_Ctags_Cmd='/usr/bin/ctags'       " point taglist to ctags
"let Tlist_GainFocus_On_ToggleOpen = 1      " Focus on the taglist when its  toggled
"let Tlist_Close_On_Select = 1              " Close when something's selected
"let Tlist_Use_Right_Window = 1             " Project uses the left window
"let Tlist_File_Fold_Auto_Close = 1         " Close folds for inactive files

"--ENABLE PYTHON/DJANGO OMNICOMPLETE
"
"filetype plugin on
"set omnifunc=syntaxcomplete#Complete
"autocmd FileType python set omnifunc=pythoncomplete#Complete
"autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
"autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
"autocmd FileType css set omnifunc=csscomplete#CompleteCSS
"autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags
"autocmd FileType php set omnifunc=phpcomplete#CompletePHP
"autocmd FileType c set omnifunc=ccomplete#Complete
"
""--SuperTab Integration
"set completeopt-=previewtj
"let g:SuperTabDefaultCompletionType = ""
"let g:SuperTabDefaultCompletionType = "context"

""map <F2> :previous<CR>                  " map F2 to open previous buffer
"map <F3> :next<CR>                      " map F3 to open next buffer
"map <F4> :NERDTreeToggle<CR>            " map F4 to open NERDTree
"map <F5> :TlistToggle<CR>               " map F5 to toggle the Tag Listing
"map <silent><C-Left> <C-T>              " taglist - map Ctrl-LeftArrow to jump to the method/property under your cursor
"map <silent><C-Right> <C-]>             " taglist - map Ctrl-RhitArrow to jump back to your source code
"map <silent><A-Right> :tabnext<CR>      " map Alt-RightArrow to jump to the next tab
"map <silent><A-Left> :tabprevious<CR>   " map Alt-LeftArrow to jump to the previous tab

" HTML tidy !!!!

" fugitive as merge tool
"git config --global mergetool.fugitive.cmd 'vim -f -c "Gdiff" "$MERGED"'
"git config --global merge.tool fugitive
